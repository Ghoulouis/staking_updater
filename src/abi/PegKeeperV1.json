{
    "address": "0x9C9bCbd349116C91696E826dBc1a109490f73B6e",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_pool",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_index",
                    "type": "uint256"
                },
                {
                    "internalType": "address",
                    "name": "_receiver",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_caller_share",
                    "type": "uint256"
                },
                {
                    "internalType": "address",
                    "name": "_aggregator",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_lp",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_admin",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "admin",
                    "type": "address"
                }
            ],
            "name": "ApplyNewAdmin",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "newReceiver",
                    "type": "address"
                }
            ],
            "name": "ApplyNewReceiver",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "admin",
                    "type": "address"
                }
            ],
            "name": "CommitNewAdmin",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "newReceiver",
                    "type": "address"
                }
            ],
            "name": "CommitNewReceiver",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "lp_amount",
                    "type": "uint256"
                }
            ],
            "name": "Profit",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "Provide",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "action_delay",
                    "type": "uint256"
                }
            ],
            "name": "SetNewActionDelay",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "caller_share",
                    "type": "uint256"
                }
            ],
            "name": "SetNewCallerShare",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "Withdraw",
            "type": "event"
        },
        {
            "inputs": [],
            "name": "AGGREGATOR",
            "outputs": [
                {
                    "internalType": "contract StableAggregator",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "I",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "IS_INVERSE",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "LP",
            "outputs": [
                {
                    "internalType": "contract IStableSwapLP",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "PEGGED",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "PEG_MUL",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "POOL",
            "outputs": [
                {
                    "internalType": "contract StableSwapPool",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "admin",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "aggregator",
            "outputs": [
                {
                    "internalType": "contract StableAggregator",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "apply_new_admin",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "apply_new_receiver",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "calc_profit",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "caller_share",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_new_admin",
                    "type": "address"
                }
            ],
            "name": "commit_new_admin",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_new_receiver",
                    "type": "address"
                }
            ],
            "name": "commit_new_receiver",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "debt",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "estimate_caller_profit",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "future_admin",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "future_receiver",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "last_change",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "new_admin_deadline",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "new_receiver_deadline",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "pegged",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "pool",
            "outputs": [
                {
                    "internalType": "contract StableSwapPool",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "receiver",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "revert_new_options",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_new_caller_share",
                    "type": "uint256"
                }
            ],
            "name": "set_new_caller_share",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_beneficiary",
                    "type": "address"
                }
            ],
            "name": "update",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "withdraw_profit",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        }
    ],
    "transactionHash": "0xbfdebd011306ef785dfda172f39aee293d3196f008f1d560a91eb86b1f90a3d7",
    "receipt": {
        "to": null,
        "from": "0x4283927A9686468095cC5BAEb9205f7016A027b1",
        "contractAddress": "0x9C9bCbd349116C91696E826dBc1a109490f73B6e",
        "transactionIndex": 0,
        "gasUsed": "1724418",
        "logsBloom": "0x
        "blockHash": "0xa3809a37ab7b91f447f55b9b16ae2dc78a333bc24fc1bc0f66994e4ebfcd9fc9",
        "transactionHash": "0xbfdebd011306ef785dfda172f39aee293d3196f008f1d560a91eb86b1f90a3d7",
        "logs": [
            {
                "transactionIndex": 0,
                "blockNumber": 7632107,
                "transactionHash": "0xbfdebd011306ef785dfda172f39aee293d3196f008f1d560a91eb86b1f90a3d7",
                "address": "0x97eec1c29f745dC7c267F90292AA663d997a601D",
                "topics": [
                    "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
                    "0x0000000000000000000000009c9bcbd349116c91696e826dbc1a109490f73b6e",
                    "0x000000000000000000000000425c9532f058dcec22f00631eacfa363414a3c95"
                ],
                "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
                "logIndex": 0,
                "blockHash": "0xa3809a37ab7b91f447f55b9b16ae2dc78a333bc24fc1bc0f66994e4ebfcd9fc9"
            },
            {
                "transactionIndex": 0,
                "blockNumber": 7632107,
                "transactionHash": "0xbfdebd011306ef785dfda172f39aee293d3196f008f1d560a91eb86b1f90a3d7",
                "address": "0x9C9bCbd349116C91696E826dBc1a109490f73B6e",
                "topics": ["0xc0a6e80c08b9d10c650a9f3e8ff16d7ee0f62bbd5c8ac3b5eba62dae04ec995a"],
                "data": "0x0000000000000000000000004283927a9686468095cc5baeb9205f7016a027b1",
                "logIndex": 1,
                "blockHash": "0xa3809a37ab7b91f447f55b9b16ae2dc78a333bc24fc1bc0f66994e4ebfcd9fc9"
            },
            {
                "transactionIndex": 0,
                "blockNumber": 7632107,
                "transactionHash": "0xbfdebd011306ef785dfda172f39aee293d3196f008f1d560a91eb86b1f90a3d7",
                "address": "0x9C9bCbd349116C91696E826dBc1a109490f73B6e",
                "topics": ["0xd9338c71e91ed720d2bd77976c87a0cd6f01ee443a6410481ffdebb9f442db67"],
                "data": "0x0000000000000000000000004283927a9686468095cc5baeb9205f7016a027b1",
                "logIndex": 2,
                "blockHash": "0xa3809a37ab7b91f447f55b9b16ae2dc78a333bc24fc1bc0f66994e4ebfcd9fc9"
            },
            {
                "transactionIndex": 0,
                "blockNumber": 7632107,
                "transactionHash": "0xbfdebd011306ef785dfda172f39aee293d3196f008f1d560a91eb86b1f90a3d7",
                "address": "0x9C9bCbd349116C91696E826dBc1a109490f73B6e",
                "topics": ["0x43abfd568a12e5f6ea230e56ba11b83e29e9921019211df9cc2e216ba9f225dc"],
                "data": "0x0000000000000000000000000000000000000000000000000000000000004e20",
                "logIndex": 3,
                "blockHash": "0xa3809a37ab7b91f447f55b9b16ae2dc78a333bc24fc1bc0f66994e4ebfcd9fc9"
            }
        ],
        "blockNumber": 7632107,
        "cumulativeGasUsed": "1724418",
        "status": 1,
        "byzantium": true
    },
    "args": [
        "0x425C9532f058DceC22F00631eaCfA363414A3c95",
        1,
        "0x4283927A9686468095cC5BAEb9205f7016A027b1",
        20000,
        "0x62b09Ef1734e2c8F074EAB205CE1e70bA369Ed4c",
        "0x32652E1fBf593EfA22F71509B2F5c5F413A6Bd22",
        "0x4283927A9686468095cC5BAEb9205f7016A027b1"
    ],
    "numDeployments": 1,
    "solcInputHash": "2143d1716aa398852b841f429906a078",
    "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_caller_share\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"ApplyNewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newReceiver\",\"type\":\"address\"}],\"name\":\"ApplyNewReceiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"CommitNewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newReceiver\",\"type\":\"address\"}],\"name\":\"CommitNewReceiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lp_amount\",\"type\":\"uint256\"}],\"name\":\"Profit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Provide\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"action_delay\",\"type\":\"uint256\"}],\"name\":\"SetNewActionDelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"caller_share\",\"type\":\"uint256\"}],\"name\":\"SetNewCallerShare\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AGGREGATOR\",\"outputs\":[{\"internalType\":\"contract StableAggregator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"I\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IS_INVERSE\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LP\",\"outputs\":[{\"internalType\":\"contract IStableSwapLP\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PEGGED\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PEG_MUL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL\",\"outputs\":[{\"internalType\":\"contract StableSwapPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aggregator\",\"outputs\":[{\"internalType\":\"contract StableAggregator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apply_new_admin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apply_new_receiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calc_profit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"caller_share\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new_admin\",\"type\":\"address\"}],\"name\":\"commit_new_admin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new_receiver\",\"type\":\"address\"}],\"name\":\"commit_new_receiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimate_caller_profit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"future_admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"future_receiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"last_change\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"new_admin_deadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"new_receiver_deadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pegged\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract StableSwapPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revert_new_options\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_new_caller_share\",\"type\":\"uint256\"}],\"name\":\"set_new_caller_share\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"update\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw_profit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/stabilizer/PegKeeperV1.sol\":\"PegKeeperV1\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":false},\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/stabilizer/PegKeeperV1.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.24;\\nimport \\\"hardhat/console.sol\\\";\\n\\ninterface StableSwapPool {\\n    function balances(uint256 i_coin) external view returns (uint256);\\n\\n    function coins(uint256 i) external view returns (address);\\n\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function balanceOf(address arg0) external view returns (uint256);\\n\\n    function add_liquidity(\\n        uint256[2] memory amounts,\\n        uint256 min_mint_amount\\n    ) external;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[2] memory amounts,\\n        uint256 max_burn_amount\\n    ) external;\\n\\n    function calc_token_amount(\\n        uint256[2] memory amounts,\\n        bool is_deposit\\n    ) external view returns (uint256);\\n}\\n\\ninterface IStableSwapLP {\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\\ninterface ERC20 {\\n    function approve(address _spender, uint256 _amount) external;\\n\\n    function decimals() external view returns (uint256);\\n}\\n\\ninterface StableAggregator {\\n    function price() external view returns (uint256);\\n}\\n\\ncontract PegKeeperV1 {\\n    event Provide(uint256 amount);\\n    event Withdraw(uint256 amount);\\n    event Profit(uint256 lp_amount);\\n    event CommitNewReceiver(address newReceiver);\\n    event ApplyNewReceiver(address newReceiver);\\n    event CommitNewAdmin(address admin);\\n    event ApplyNewAdmin(address admin);\\n    event SetNewActionDelay(uint256 action_delay);\\n    event SetNewCallerShare(uint256 caller_share);\\n\\n    uint256 constant ACTION_DELAY = 15 * 60;\\n    uint256 constant ADMIN_ACTIONS_DELAY = 3 * 86400;\\n\\n    uint256 constant PRECISION = 1e18;\\n    uint256 constant PROFIT_THRESHOLD = 10 ** 18;\\n    uint256 constant SHARE_PRECISION = 10 ** 5;\\n\\n    StableSwapPool public immutable POOL;\\n    uint256 public immutable I; // index of pegged in pool\\n    address public immutable PEGGED;\\n    bool public immutable IS_INVERSE;\\n    uint256 public immutable PEG_MUL;\\n    IStableSwapLP public LP;\\n    StableAggregator public immutable AGGREGATOR;\\n\\n    uint256 public last_change;\\n    uint256 public debt;\\n    uint256 public caller_share;\\n\\n    address public admin;\\n    address public future_admin;\\n    address public receiver;\\n    address public future_receiver;\\n\\n    uint256 public new_admin_deadline;\\n    uint256 public new_receiver_deadline;\\n\\n    // address public immutable FACTORY;\\n\\n    constructor(\\n        address _pool, // Contract pool\\n        uint256 _index, // Index of the pegged\\n        address _receiver, // REceiver of profit\\n        uint256 _caller_share, // Caller's share of profit\\n        // address _factory, // Factory address which should be able to take coins away\\n        address _aggregator, // Price aggregator which shows the price of the pegged in real \\\"dollars\\\"\\n        address _lp, // LP token address\\n        address _admin // Admin address\\n    ) {\\n        require(_index < 2, \\\"Index out of range\\\");\\n        POOL = StableSwapPool(_pool);\\n        I = _index;\\n        PEGGED = POOL.coins(_index);\\n        ERC20(PEGGED).approve(_pool, type(uint256).max);\\n        // ERC20(PEGGED).approve(_factory, type(uint256).max);\\n        PEG_MUL = 10 ** (18 - ERC20(POOL.coins(1 - _index)).decimals());\\n        LP = IStableSwapLP(_lp);\\n\\n        admin = _admin;\\n        require(_receiver != address(0), \\\"Receiver is zero address\\\");\\n        receiver = _receiver;\\n        emit ApplyNewAdmin(_admin);\\n        emit ApplyNewReceiver(_receiver);\\n\\n        require(_caller_share <= SHARE_PRECISION, \\\"Share is too big\\\");\\n        caller_share = _caller_share;\\n        emit SetNewCallerShare(_caller_share);\\n\\n        // FACTORY = _factory;\\n        AGGREGATOR = StableAggregator(_aggregator);\\n        IS_INVERSE = (_index == 0);\\n    }\\n\\n    // function factory() external view returns (address) {\\n    //     return FACTORY;\\n    // }\\n\\n    function pegged() external view returns (address) {\\n        return PEGGED;\\n    }\\n\\n    function pool() external view returns (StableSwapPool) {\\n        return POOL;\\n    }\\n\\n    function aggregator() external view returns (StableAggregator) {\\n        return AGGREGATOR;\\n    }\\n\\n    function _provide(uint256 _amount) internal {\\n        // We already have all reserves here\\n        // ERC20(PEGGED).mint(address(this), _amount);\\n        if (_amount == 0) {\\n            return;\\n        }\\n        uint256[2] memory amounts;\\n        amounts[I] = _amount;\\n        last_change = block.timestamp;\\n        debt += _amount;\\n        emit Provide(_amount);\\n        POOL.add_liquidity(amounts, 0);\\n    }\\n\\n    function _withdraw(uint256 _amount) internal {\\n        if (_amount == 0) {\\n            return;\\n        }\\n        uint256[2] memory amounts;\\n        amounts[I] = _amount;\\n        last_change = block.timestamp;\\n        debt -= _amount;\\n        emit Withdraw(_amount);\\n\\n        POOL.remove_liquidity_imbalance(amounts, type(uint256).max);\\n    }\\n\\n    function _calc_profit() internal view returns (uint256) {\\n        uint256 lp_balance = LP.balanceOf(address(this));\\n\\n        uint256 virtual_price = POOL.get_virtual_price();\\n        uint256 lp_debt = (debt * PRECISION) / virtual_price + PROFIT_THRESHOLD;\\n\\n        if (lp_balance <= lp_debt) {\\n            return 0;\\n        } else {\\n            return lp_balance - lp_debt;\\n        }\\n    }\\n\\n    function _calc_future_profit(\\n        uint256 _amount,\\n        bool _is_deposit\\n    ) internal view returns (uint256) {\\n        uint256 lp_balance = LP.balanceOf(address(this));\\n\\n        uint256 debt_local = debt;\\n        uint256 amount_local = _amount;\\n        if (!_is_deposit) {\\n            amount_local = min(_amount, debt_local);\\n        }\\n\\n        uint256[2] memory amounts;\\n        amounts[I] = amount_local;\\n        uint256 lp_balance_diff = POOL.calc_token_amount(amounts, _is_deposit);\\n\\n        if (_is_deposit) {\\n            lp_balance += lp_balance_diff;\\n            debt_local += amount_local;\\n        } else {\\n            lp_balance -= lp_balance_diff;\\n            debt_local -= amount_local;\\n        }\\n\\n        uint256 virtual_price = POOL.get_virtual_price();\\n        uint256 lp_debt = (debt_local * PRECISION) /\\n            virtual_price +\\n            PROFIT_THRESHOLD;\\n\\n        if (lp_balance <= lp_debt) {\\n            return 0;\\n        } else {\\n            return lp_balance - lp_debt;\\n        }\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function calc_profit() external view returns (uint256) {\\n        return _calc_profit();\\n    }\\n\\n    function estimate_caller_profit() external view returns (uint256) {\\n        if (last_change + ACTION_DELAY > block.timestamp) {\\n            return 0;\\n        }\\n\\n        uint256 balance_pegged = POOL.balances(I);\\n        uint256 balance_peg = POOL.balances(1 - I) * PEG_MUL;\\n\\n        uint256 initial_profit = _calc_profit();\\n\\n        uint256 p_agg = AGGREGATOR.price(); // current USD per stablecoin\\n\\n        // Checking the balance will ensure no-loss of the stabilizer, but to ensure stabilization\\n        // we need to exclude \\\"bad\\\" p_agg, so we add an extra check for it\\n        uint256 new_profit = 0;\\n        if (balance_peg > balance_pegged) {\\n            if (p_agg < 10 ** 18) {\\n                return 0;\\n            }\\n            new_profit = _calc_future_profit(\\n                (balance_peg - balance_pegged) / 5,\\n                true\\n            ); // this dumps stablecoin\\n        } else {\\n            if (p_agg > 10 ** 18) {\\n                return 0;\\n            }\\n            new_profit = _calc_future_profit(\\n                (balance_pegged - balance_peg) / 5,\\n                false\\n            ); // this pumps stablecoin\\n        }\\n\\n        if (new_profit < initial_profit) {\\n            return 0;\\n        }\\n        uint256 lp_amount = new_profit - initial_profit;\\n        return (lp_amount * caller_share) / SHARE_PRECISION;\\n    }\\n\\n    function update(address _beneficiary) external returns (uint256) {\\n        if (last_change + ACTION_DELAY > block.timestamp) {\\n            revert(\\\"Action delay\\\");\\n        }\\n\\n        uint256 balance_pegged = POOL.balances(I);\\n        uint256 balance_peg = POOL.balances(1 - I) * PEG_MUL;\\n\\n        uint256 initial_profit = _calc_profit();\\n\\n        uint256 p_agg = AGGREGATOR.price(); // Current USD per stablecoin\\n\\n        if (balance_peg > balance_pegged) {\\n            require(p_agg >= 10 ** 18, \\\"peg unprofitable\\\");\\n            _provide((balance_peg - balance_pegged) / 5); // this dumps stablecoin\\n        } else {\\n            require(p_agg <= 10 ** 18, \\\"peg unprofitable\\\");\\n            _withdraw((balance_pegged - balance_peg) / 5); // this pumps stablecoin\\n        }\\n\\n        uint256 new_profit = _calc_profit();\\n        require(new_profit >= initial_profit, \\\"peg unprofitable\\\");\\n        uint256 lp_amount = new_profit - initial_profit;\\n        uint256 caller_profit = (lp_amount * caller_share) / SHARE_PRECISION;\\n        if (caller_profit > 0) {\\n            LP.transfer(_beneficiary, caller_profit);\\n        }\\n\\n        return caller_profit;\\n    }\\n\\n    function set_new_caller_share(uint256 _new_caller_share) external {\\n        require(msg.sender == admin, \\\"only admin\\\");\\n        require(_new_caller_share <= SHARE_PRECISION, \\\"bad part value\\\");\\n\\n        caller_share = _new_caller_share;\\n\\n        emit SetNewCallerShare(_new_caller_share);\\n    }\\n\\n    function withdraw_profit() external returns (uint256) {\\n        uint256 lp_amount = _calc_profit();\\n        LP.transfer(receiver, lp_amount);\\n        emit Profit(lp_amount);\\n        return lp_amount;\\n    }\\n\\n    function commit_new_admin(address _new_admin) external {\\n        require(msg.sender == admin, \\\"only admin\\\");\\n        require(new_admin_deadline == 0, \\\"active action\\\");\\n\\n        uint256 deadline = block.timestamp + ADMIN_ACTIONS_DELAY;\\n        new_admin_deadline = deadline;\\n        future_admin = _new_admin;\\n\\n        emit CommitNewAdmin(_new_admin);\\n    }\\n\\n    function apply_new_admin() external {\\n        address new_admin = future_admin;\\n        require(msg.sender == new_admin, \\\"only new admin\\\");\\n\\n        require(block.timestamp >= new_admin_deadline, \\\"insufficient time\\\");\\n        require(new_admin_deadline != 0, \\\"no active action\\\");\\n\\n        admin = new_admin;\\n        new_admin_deadline = 0;\\n\\n        emit ApplyNewAdmin(new_admin);\\n    }\\n\\n    function commit_new_receiver(address _new_receiver) external {\\n        require(msg.sender == admin, \\\"only admin\\\");\\n        require(new_receiver_deadline == 0, \\\"active action\\\");\\n\\n        uint256 deadline = block.timestamp + ADMIN_ACTIONS_DELAY;\\n        new_receiver_deadline = deadline;\\n        future_receiver = _new_receiver;\\n\\n        emit CommitNewReceiver(_new_receiver);\\n    }\\n\\n    function apply_new_receiver() external {\\n        require(block.timestamp >= new_receiver_deadline, \\\"insufficient time\\\");\\n        require(new_receiver_deadline != 0, \\\"no active action\\\");\\n\\n        address new_receiver = future_receiver;\\n        receiver = new_receiver;\\n        new_receiver_deadline = 0;\\n\\n        emit ApplyNewReceiver(new_receiver);\\n    }\\n\\n    function revert_new_options() external {\\n        require(msg.sender == admin, \\\"only admin\\\");\\n\\n        new_admin_deadline = 0;\\n        new_receiver_deadline = 0;\\n\\n        emit ApplyNewAdmin(admin);\\n        emit ApplyNewReceiver(receiver);\\n    }\\n}\\n\",\"keccak256\":\"0x67f0fefcbbde7e82b6200b3ef249164a8635ce5ff2c77029acd47bfbea71ab22\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n}\\n\",\"keccak256\":\"0xf2560b5386574153057104d19a9e68a32ee912cf23c0c8df1fe9a0607f42d543\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x61014060405234620000fc57620000266200001962000214565b959490949391936200046d565b604051611ae46200087e82396080518181816102fd0152818161056501528181610932015281816109c3015281816111e201528181611224015281816114b601528181611718015281816118630152818161195001526119dd015260a05181818161066601528181610961015281816109f501528181611697015281816117e70152611924015260c05181818161021c0152610461015260e0518161072c01526101005181818161052c01528181610a4601526112600152610120518181816103cb01528181610a7e01526112980152611ae490f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b038211176200013957604052565b62000101565b90620001566200014e60405190565b928362000117565b565b6001600160a01b031690565b90565b6001600160a01b0381165b03620000fc57565b90505190620001568262000167565b8062000172565b90505190620001568262000189565b60e081830312620000fc57620001b682826200017a565b92620001c6836020840162000190565b92620001d681604085016200017a565b92620001e6826060830162000190565b9262000164620001fa84608085016200017a565b936200020a8160a086016200017a565b9360c0016200017a565b6200023762002362803803806200022b816200013f565b9283398101906200019f565b90919293949596565b6200016462000164620001649290565b156200025857565b60405162461bcd60e51b8152602060048201526012602482015271496e646578206f7574206f662072616e676560701b6044820152606490fd5b620001649062000158906001600160a01b031682565b620001649062000292565b6200016490620002a8565b90602082820312620000fc5762000164916200017a565b6040513d6000823e3d90fd5b6000910312620000fc57565b6001600160a01b039091168152604081019291620001569160200152565b634e487b7160e01b600052601160045260246000fd5b919082039182116200032f57565b6200030b565b90602082820312620000fc57620001649162000190565b604d81116200032f57600a0a90565b906001600160a01b03905b9181191691161790565b9062000384620001646200038c92620002b3565b82546200035b565b9055565b6200015862000164620001649290565b620001649062000390565b15620003b357565b60405162461bcd60e51b815260206004820152601860248201527f5265636569766572206973207a65726f206164647265737300000000000000006044820152606490fd5b62000164620186a062000240565b156200040e57565b60405162461bcd60e51b815260206004820152601060248201526f536861726520697320746f6f2062696760801b6044820152606490fd5b906000199062000366565b9062000465620001646200038c9262000240565b825462000446565b95909562000490876200048962000485600262000240565b9190565b1062000250565b6200049b81620002b3565b6080528660a052620004f66020620004c5620004bf6080516001600160a01b031690565b620002b3565b63c661065790620004e88b92620004db60405190565b9586948593849360e01b90565b835260048301526024820190565b03915afa908115620007fd576000916200085a575b5060c0526200052a620004bf620004bf60c0516001600160a01b031690565b6000199163095ea7b391803b15620000fc576200055f600080946200056b6200055260405190565b9788968795869460e01b90565b845260048401620002ed565b03925af18015620007fd5762000837575b50620005d660129560206200059d620004bf6080516001600160a01b031690565b63c661065790620004e8620005be8c620005b8600162000240565b62000321565b92620005c960405190565b9687948593849360e01b90565b03915afa918215620007fd5762000602620004bf6200061b9460209360009162000803575b50620002b3565b63313ce567906200061260405190565b94859260e01b90565b825260049082905afa908115620007fd576200065e620006586200066893620007a79a6200067096600092620007c1575b50620005b89062000240565b6200034c565b61010052620002b3565b600062000370565b6200067d81600462000370565b620006ab82620006a362000696620001586000620003a0565b916001600160a01b031690565b1415620003ab565b620006b882600662000370565b620006ff7fc0a6e80c08b9d10c650a9f3e8ff16d7ee0f62bbd5c8ac3b5eba62dae04ec995a91620006e860405190565b918291826001600160a01b03909116815260200190565b0390a1620007327fd9338c71e91ed720d2bd77976c87a0cd6f01ee443a6410481ffdebb9f442db6791620006e860405190565b0390a162000754816200074c6200048562000164620003f8565b111562000406565b6200076181600362000451565b6200079e7f43abfd568a12e5f6ea230e56ba11b83e29e9921019211df9cc2e216ba9f225dc916200079160405190565b9182918290815260200190565b0390a1620002b3565b61012052620007bb62000485600062000240565b1460e052565b620005b8919250620007ed9060203d8111620007f5575b620007e4818362000117565b81019062000335565b91906200064c565b503d620007d8565b620002d5565b620008289150843d81116200082f575b6200081f818362000117565b810190620002be565b38620005fb565b503d62000813565b620008539060006200084a818362000117565b810190620002e1565b386200057c565b62000876915060203d81116200082f576200081f818362000117565b386200050b56fe6080604052600436101561001257600080fd5b60003560e01c806309078613146101dd5780630dca59c1146101d857806316f0115b146101d357806317f7182a146101ce5780631c1b8772146101c9578063245a7bfc1461016a5780632c9f7f92146101c4578063322f15d9146101bf578063394b146d146101ba5780633ad5d692146101b55780633bea9ddd146101b0578063553b549c146101ab578063561a4147146101a657806362396066146101a157806373b0be461461019c5780637535d246146101975780637bfd8fad146101925780639f5ef86f1461018d578063b6fccf8a14610188578063c336fbd514610183578063ceb667c51461017e578063d0d1849114610179578063d726000614610174578063df81cd3f1461016f578063eb365adc1461016a578063f636b05f14610165578063f7260d3e14610160578063f851a4401461015b5763f96b9f18036101ed57610717565b6106fc565b6106d5565b6106b1565b6103b6565b610696565b610651565b610636565b61061e565b610606565b6105eb565b6105c8565b610589565b610550565b610517565b6104fc565b6104d3565b6104b8565b610491565b61044c565b610431565b61040a565b6103ef565b61039b565b61034d565b6102e8565b61027d565b610207565b60009103126101ed57565b600080fd5b6001600160a01b031690565b90565b9052565b565b346101ed576102173660046101e2565b6102577f00000000000000000000000000000000000000000000000000000000000000005b6040515b918291826001600160a01b03909116815260200190565b0390f35b6101fe916008021c81565b906101fe915461025b565b6101fe60006002610266565b346101ed5761028d3660046101e2565b610257610298610271565b6040515b9182918290815260200190565b6101fe906101f2906001600160a01b031682565b6101fe906102a9565b6101fe906102bd565b610201906102c6565b60208101929161020591906102cf565b346101ed576102f83660046101e2565b6102577f00000000000000000000000000000000000000000000000000000000000000005b604051918291826102d8565b6101fe916008021c6101f2565b906101fe9154610329565b6101fe60006005610336565b346101ed5761035d3660046101e2565b61025761023c610341565b6001600160a01b0381165b036101ed57565b9050359061020582610368565b906020828203126101ed576101fe9161037a565b346101ed576102576102986103b1366004610387565b610907565b346101ed576103c63660046101e2565b6102577f000000000000000000000000000000000000000000000000000000000000000061031d565b346101ed576103ff3660046101e2565b610257610298610cc2565b346101ed5761041a3660046101e2565b610257610298610d5e565b6101fe60006001610266565b346101ed576104413660046101e2565b610257610298610425565b346101ed5761045c3660046101e2565b6102577f000000000000000000000000000000000000000000000000000000000000000061023c565b6101fe60006007610336565b346101ed576104a13660046101e2565b61025761023c610485565b6101fe60006008610266565b346101ed576104c83660046101e2565b6102576102986104ac565b346101ed576104eb6104e6366004610387565b610e38565b604051005b6101fe60006009610266565b346101ed5761050c3660046101e2565b6102576102986104f0565b346101ed576105273660046101e2565b6102577f0000000000000000000000000000000000000000000000000000000000000000610298565b346101ed576105603660046101e2565b6102577f000000000000000000000000000000000000000000000000000000000000000061031d565b346101ed576105993660046101e2565b6104eb610ed3565b80610373565b90503590610205826105a1565b906020828203126101ed576101fe916105a7565b346101ed576104eb6105db3660046105b4565b610fb8565b6101fe600080610336565b346101ed576105fb3660046101e2565b61025761031d6105e0565b346101ed576106163660046101e2565b6104eb6110da565b346101ed5761062e3660046101e2565b6104eb611182565b346101ed576106463660046101e2565b6102576102986111c5565b346101ed576106613660046101e2565b6102577f0000000000000000000000000000000000000000000000000000000000000000610298565b6101fe60006003610266565b346101ed576106a63660046101e2565b61025761029861068a565b346101ed576104eb6106c4366004610387565b6113e3565b6101fe60006006610336565b346101ed576106e53660046101e2565b61025761023c6106c9565b6101fe60006004610336565b346101ed5761070c3660046101e2565b61025761023c6106f0565b346101ed576107273660046101e2565b6040517f000000000000000000000000000000000000000000000000000000000000000015158152602090f35b6101fe9081565b6101fe9054610754565b6101fe6101fe6101fe9290565b6101fe610384610765565b634e487b7160e01b600052601160045260246000fd5b919082018092116107a057565b61077d565b634e487b7160e01b600052604160045260246000fd5b90601f01601f1916810190811067ffffffffffffffff8211176107dd57604052565b6107a5565b90505190610205826105a1565b906020828203126101ed576101fe916107e2565b6040513d6000823e3d90fd5b919082039182116107a057565b818102929181159184041417156107a057565b1561083657565b60405162461bcd60e51b815260206004820152601060248201526f70656720756e70726f66697461626c6560801b6044820152606490fd5b634e487b7160e01b600052601260045260246000fd5b9061088e565b9190565b908115610899570490565b61086e565b6101fe620186a0610765565b6101fe906101f2565b6101fe90546108aa565b801515610373565b90505190610205826108bd565b906020828203126101ed576101fe916108c5565b6001600160a01b0390911681526040810192916102059160200152565b0152565b610922610914600161075b565b61091c610772565b90610793565b4210610c8e576109a560206109567f00000000000000000000000000000000000000000000000000000000000000006102c6565b634903b0d1906109977f00000000000000000000000000000000000000000000000000000000000000009261098a60405190565b9586948593849360e01b90565b835260048301526024820190565b03915afa908115610beb57600091610c70575b50610a2d60206109e77f00000000000000000000000000000000000000000000000000000000000000006102c6565b634903b0d190610997610a237f0000000000000000000000000000000000000000000000000000000000000000610a1e6001610765565b61080f565b9261098a60405190565b03915afa8015610beb57610a6b91600091610c52575b507f00000000000000000000000000000000000000000000000000000000000000009061081c565b90610aba610a7761145d565b6020610aa27f00000000000000000000000000000000000000000000000000000000000000006102c6565b63a035b1fe90610ab160405190565b94859260e01b90565b825260049082905afa928315610beb57610b5094610b4894610b3894600091610c24575b5082821115610bf057610b2692610b2192610a1e610b1193610b0a61088a670de0b6b3a7640000610765565b101561082f565b610b1b6005610765565b90610884565b6117c2565b610b2e61145d565b610a1e8282610b0a565b610b42600361075b565b9061081c565b610b1b61089e565b9081610b5f61088a6000610765565b11610b68575090565b6020610b7c610b7760006108b3565b6102c6565b63a9059cbb9290610ba360008695610bae610b9660405190565b9788968795869460e01b90565b8452600484016108e6565b03925af18015610beb57610bc0575090565b610be09060203d8111610be4575b610bd881836107bb565b8101906108d2565b5090565b503d610bce565b610803565b610c1a91610c1f93610a1e610b1193610c1361088a670de0b6b3a7640000610765565b111561082f565b611672565b610b26565b610c45915060203d8111610c4b575b610c3d81836107bb565b8101906107ef565b38610ade565b503d610c33565b610c6a915060203d8111610c4b57610c3d81836107bb565b38610a43565b610c88915060203d8111610c4b57610c3d81836107bb565b386109b8565b60405162461bcd60e51b815260206004820152600c60248201526b416374696f6e2064656c617960a01b6044820152606490fd5b610cca61145d565b610cd7610b7760006108b3565b602063a9059cbb91610ce960066108b3565b90610ba360008695610cfd610b9660405190565b03925af18015610beb57610d42575b5080610d3c7f357d905f1831209797df4d55d79c5c5bf1d9f7311c976afd05e13d881eab9bc89161029c60405190565b0390a190565b610d599060203d8111610be457610bd881836107bb565b610d0c565b6101fe61145d565b15610d6d57565b60405162461bcd60e51b815260206004820152600a60248201526937b7363c9030b236b4b760b11b6044820152606490fd5b15610da657565b60405162461bcd60e51b815260206004820152600d60248201526c30b1ba34bb329030b1ba34b7b760991b6044820152606490fd5b6101fe6203f480610765565b90600019905b9181191691161790565b90610e076101fe610e0e92610765565b8254610de7565b9055565b906001600160a01b0390610ded565b90610e316101fe610e0e926102c6565b8254610e12565b610e5f33610e59610e4c6101f260046108b3565b916001600160a01b031690565b14610d66565b610e7f610e6c600961075b565b610e7961088a6000610765565b14610d9f565b610e95610e8e4261091c610ddb565b6009610df7565b610ea0816007610e21565b610ece7ff918f289f5185efe74d8bdf25364dbbc9c83a2bc438ede64b939cf6751ccf27c9161024060405190565b0390a1565b610ee733610e59610e4c6101f260046108b3565b610efb610ef46000610765565b6008610df7565b610f08610e8e6000610765565b610f1260046108b3565b610f407fc0a6e80c08b9d10c650a9f3e8ff16d7ee0f62bbd5c8ac3b5eba62dae04ec995a9161024060405190565b0390a1610f4d60066108b3565b610ece7fd9338c71e91ed720d2bd77976c87a0cd6f01ee443a6410481ffdebb9f442db679161024060405190565b15610f8257565b60405162461bcd60e51b815260206004820152600e60248201526d62616420706172742076616c756560901b6044820152606490fd5b610fcc33610e59610e4c6101f260046108b3565b610fe581610fde61088a6101fe61089e565b1115610f7b565b610ff0816003610df7565b610ece7f43abfd568a12e5f6ea230e56ba11b83e29e9921019211df9cc2e216ba9f225dc9161029c60405190565b1561102557565b60405162461bcd60e51b815260206004820152600e60248201526d37b7363c903732bb9030b236b4b760911b6044820152606490fd5b1561106257565b60405162461bcd60e51b8152602060048201526011602482015270696e73756666696369656e742074696d6560781b6044820152606490fd5b156110a257565b60405162461bcd60e51b815260206004820152601060248201526f37379030b1ba34bb329030b1ba34b7b760811b6044820152606490fd5b6110e460056108b3565b611100336110fa6001600160a01b038416610e4c565b1461101e565b61111b4261111461088a6101fe600861075b565b101561105b565b61113c611128600861075b565b61113561088a6000610765565b141561109b565b611147816004610e21565b611154610ef46000610765565b610ece7fc0a6e80c08b9d10c650a9f3e8ff16d7ee0f62bbd5c8ac3b5eba62dae04ec995a9161024060405190565b6111964261111461088a6101fe600961075b565b6111a3611128600961075b565b6111ad60076108b3565b6111b8816006610e21565b610f4d610e8e6000610765565b6111d2610914600161075b565b42106113d95761120660206109567f00000000000000000000000000000000000000000000000000000000000000006102c6565b03915afa908115610beb576000916113bb575b5061124860206109e77f00000000000000000000000000000000000000000000000000000000000000006102c6565b03915afa8015610beb5761128591600091610c5257507f00000000000000000000000000000000000000000000000000000000000000009061081c565b61128d61145d565b916112d460206112bc7f00000000000000000000000000000000000000000000000000000000000000006102c6565b63a035b1fe906112cb60405190565b93849260e01b90565b825260049082905afa908115610beb5760009161139d575b506112f76000610765565b50818311156113635761131461088a670de0b6b3a7640000610765565b1061135657610b11611329916113319361080f565b6001906118d8565b905b80821061134a57610b38610b48916101fe9361080f565b50506101fe6000610765565b5050506101fe6000610765565b91909161137a61088a670de0b6b3a7640000610765565b1161135657610b1161138f916113979361080f565b6000906118d8565b90611333565b6113b5915060203d8111610c4b57610c3d81836107bb565b386112ec565b6113d3915060203d8111610c4b57610c3d81836107bb565b38611219565b6101fe6000610765565b6113f733610e59610e4c6101f260046108b3565b611404610e6c600861075b565b611413610ef44261091c610ddb565b61141e816005610e21565b610ece7f0305c49816a5a9a099d81e90d76421c9a4a529e0640cd15297b6fc8f1c9ac6ff9161024060405190565b6101fe670de0b6b3a7640000610765565b611498602061146f610b7760006108b3565b6370a0823190611481610a23306102c6565b83526001600160a01b031660048301526024820190565b03915afa908115610beb57600091611566575b506114e960206114da7f00000000000000000000000000000000000000000000000000000000000000006102c6565b63bb7b8b80906112cb60405190565b825260049082905afa908115610beb5761152c9161152491600091611548575b5061151f611517600261075b565b610b4261144c565b610884565b61091c61144c565b80821161153f5750506101fe6000610765565b6101fe9161080f565b611560915060203d8111610c4b57610c3d81836107bb565b38611509565b61157e915060203d8111610c4b57610c3d81836107bb565b386114ab565b9061020561159160405190565b92836107bb565b67ffffffffffffffff81116107dd5760200290565b6115b96101fe91611598565b611584565b369037565b906102056115d0836115ad565b926115db8491611598565b906115be565b6101fe60026115c3565b634e487b7160e01b600052603260045260246000fd5b906002811015611612576020020190565b6115eb565b61162361088a60029390565b6000915b8383106116345750505050565b61164e6116476001928451815260200190565b9260200190565b92019190611627565b91604061020592949361090360608201966000830190611617565b8061168061088a6000610765565b146117945761168d6115e1565b906116bf816116bc7f000000000000000000000000000000000000000000000000000000000000000085611601565b52565b6116ca426001610df7565b6116e26116db82610a1e600261075b565b6002610df7565b6117107f5b6b431d4476a211bb7d41c20d1aab9ae2321deee0d20be3d9fc9b1093fa6e3d9161029c60405190565b0390a161173c7f00000000000000000000000000000000000000000000000000000000000000006102c6565b6000199163e310327391803b156101ed576117606000809461176b610b9660405190565b845260048401611657565b03925af18015610beb5761177c5750565b61020590600061178c81836107bb565b8101906101e2565b50565b61020190610765565b9160406102059294936117bb60608201966000830190611617565b0190611797565b806117d061088a6000610765565b14611794576117dd6115e1565b9061180c816116bc7f000000000000000000000000000000000000000000000000000000000000000085611601565b611817426001610df7565b61182d6116db82611828600261075b565b610793565b61185b7f8d685bd3f45d861c759ed7a46ea3d30eb5cc6ce9fe06c526931f94c963bca7d29161029c60405190565b0390a16118877f00000000000000000000000000000000000000000000000000000000000000006102c6565b600091630b4c7e4d91803b156101ed576118aa6000809461176b610b9660405190565b8452600484016117a0565b9160406102059294936118d060608201966000830190611617565b019015159052565b906118eb602061146f610b7760006108b3565b03915afa908115610beb57600091611aa7575b50611909600261075b565b838315611a93575b5061191a6115e1565b92611949856116bc7f000000000000000000000000000000000000000000000000000000000000000087611601565b60206119747f00000000000000000000000000000000000000000000000000000000000000006102c6565b63ed8e84f3959061199984976119a461198c60405190565b998a958694859460e01b90565b8452600484016118b5565b03915afa8015610beb57611a1094600091611a75575b509015611a5b576119d6926119cf9190610793565b9390610793565b6020611a017f00000000000000000000000000000000000000000000000000000000000000006102c6565b63bb7b8b8090610ab160405190565b825260049082905afa908115610beb5761151f6115249261152c94600091611a3d575b5091610b4261144c565b611a55915060203d8111610c4b57610c3d81836107bb565b38611a33565b611a7092611a69919061080f565b939061080f565b6119d6565b611a8d915060203d8111610c4b57610c3d81836107bb565b386119ba565b611aa09194508490611ac5565b9238611911565b611abf915060203d8111610c4b57610c3d81836107bb565b386118fe565b9080821015611ad2575090565b90509056fea164736f6c6343000818000a",
    "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c806309078613146101dd5780630dca59c1146101d857806316f0115b146101d357806317f7182a146101ce5780631c1b8772146101c9578063245a7bfc1461016a5780632c9f7f92146101c4578063322f15d9146101bf578063394b146d146101ba5780633ad5d692146101b55780633bea9ddd146101b0578063553b549c146101ab578063561a4147146101a657806362396066146101a157806373b0be461461019c5780637535d246146101975780637bfd8fad146101925780639f5ef86f1461018d578063b6fccf8a14610188578063c336fbd514610183578063ceb667c51461017e578063d0d1849114610179578063d726000614610174578063df81cd3f1461016f578063eb365adc1461016a578063f636b05f14610165578063f7260d3e14610160578063f851a4401461015b5763f96b9f18036101ed57610717565b6106fc565b6106d5565b6106b1565b6103b6565b610696565b610651565b610636565b61061e565b610606565b6105eb565b6105c8565b610589565b610550565b610517565b6104fc565b6104d3565b6104b8565b610491565b61044c565b610431565b61040a565b6103ef565b61039b565b61034d565b6102e8565b61027d565b610207565b60009103126101ed57565b600080fd5b6001600160a01b031690565b90565b9052565b565b346101ed576102173660046101e2565b6102577f00000000000000000000000000000000000000000000000000000000000000005b6040515b918291826001600160a01b03909116815260200190565b0390f35b6101fe916008021c81565b906101fe915461025b565b6101fe60006002610266565b346101ed5761028d3660046101e2565b610257610298610271565b6040515b9182918290815260200190565b6101fe906101f2906001600160a01b031682565b6101fe906102a9565b6101fe906102bd565b610201906102c6565b60208101929161020591906102cf565b346101ed576102f83660046101e2565b6102577f00000000000000000000000000000000000000000000000000000000000000005b604051918291826102d8565b6101fe916008021c6101f2565b906101fe9154610329565b6101fe60006005610336565b346101ed5761035d3660046101e2565b61025761023c610341565b6001600160a01b0381165b036101ed57565b9050359061020582610368565b906020828203126101ed576101fe9161037a565b346101ed576102576102986103b1366004610387565b610907565b346101ed576103c63660046101e2565b6102577f000000000000000000000000000000000000000000000000000000000000000061031d565b346101ed576103ff3660046101e2565b610257610298610cc2565b346101ed5761041a3660046101e2565b610257610298610d5e565b6101fe60006001610266565b346101ed576104413660046101e2565b610257610298610425565b346101ed5761045c3660046101e2565b6102577f000000000000000000000000000000000000000000000000000000000000000061023c565b6101fe60006007610336565b346101ed576104a13660046101e2565b61025761023c610485565b6101fe60006008610266565b346101ed576104c83660046101e2565b6102576102986104ac565b346101ed576104eb6104e6366004610387565b610e38565b604051005b6101fe60006009610266565b346101ed5761050c3660046101e2565b6102576102986104f0565b346101ed576105273660046101e2565b6102577f0000000000000000000000000000000000000000000000000000000000000000610298565b346101ed576105603660046101e2565b6102577f000000000000000000000000000000000000000000000000000000000000000061031d565b346101ed576105993660046101e2565b6104eb610ed3565b80610373565b90503590610205826105a1565b906020828203126101ed576101fe916105a7565b346101ed576104eb6105db3660046105b4565b610fb8565b6101fe600080610336565b346101ed576105fb3660046101e2565b61025761031d6105e0565b346101ed576106163660046101e2565b6104eb6110da565b346101ed5761062e3660046101e2565b6104eb611182565b346101ed576106463660046101e2565b6102576102986111c5565b346101ed576106613660046101e2565b6102577f0000000000000000000000000000000000000000000000000000000000000000610298565b6101fe60006003610266565b346101ed576106a63660046101e2565b61025761029861068a565b346101ed576104eb6106c4366004610387565b6113e3565b6101fe60006006610336565b346101ed576106e53660046101e2565b61025761023c6106c9565b6101fe60006004610336565b346101ed5761070c3660046101e2565b61025761023c6106f0565b346101ed576107273660046101e2565b6040517f000000000000000000000000000000000000000000000000000000000000000015158152602090f35b6101fe9081565b6101fe9054610754565b6101fe6101fe6101fe9290565b6101fe610384610765565b634e487b7160e01b600052601160045260246000fd5b919082018092116107a057565b61077d565b634e487b7160e01b600052604160045260246000fd5b90601f01601f1916810190811067ffffffffffffffff8211176107dd57604052565b6107a5565b90505190610205826105a1565b906020828203126101ed576101fe916107e2565b6040513d6000823e3d90fd5b919082039182116107a057565b818102929181159184041417156107a057565b1561083657565b60405162461bcd60e51b815260206004820152601060248201526f70656720756e70726f66697461626c6560801b6044820152606490fd5b634e487b7160e01b600052601260045260246000fd5b9061088e565b9190565b908115610899570490565b61086e565b6101fe620186a0610765565b6101fe906101f2565b6101fe90546108aa565b801515610373565b90505190610205826108bd565b906020828203126101ed576101fe916108c5565b6001600160a01b0390911681526040810192916102059160200152565b0152565b610922610914600161075b565b61091c610772565b90610793565b4210610c8e576109a560206109567f00000000000000000000000000000000000000000000000000000000000000006102c6565b634903b0d1906109977f00000000000000000000000000000000000000000000000000000000000000009261098a60405190565b9586948593849360e01b90565b835260048301526024820190565b03915afa908115610beb57600091610c70575b50610a2d60206109e77f00000000000000000000000000000000000000000000000000000000000000006102c6565b634903b0d190610997610a237f0000000000000000000000000000000000000000000000000000000000000000610a1e6001610765565b61080f565b9261098a60405190565b03915afa8015610beb57610a6b91600091610c52575b507f00000000000000000000000000000000000000000000000000000000000000009061081c565b90610aba610a7761145d565b6020610aa27f00000000000000000000000000000000000000000000000000000000000000006102c6565b63a035b1fe90610ab160405190565b94859260e01b90565b825260049082905afa928315610beb57610b5094610b4894610b3894600091610c24575b5082821115610bf057610b2692610b2192610a1e610b1193610b0a61088a670de0b6b3a7640000610765565b101561082f565b610b1b6005610765565b90610884565b6117c2565b610b2e61145d565b610a1e8282610b0a565b610b42600361075b565b9061081c565b610b1b61089e565b9081610b5f61088a6000610765565b11610b68575090565b6020610b7c610b7760006108b3565b6102c6565b63a9059cbb9290610ba360008695610bae610b9660405190565b9788968795869460e01b90565b8452600484016108e6565b03925af18015610beb57610bc0575090565b610be09060203d8111610be4575b610bd881836107bb565b8101906108d2565b5090565b503d610bce565b610803565b610c1a91610c1f93610a1e610b1193610c1361088a670de0b6b3a7640000610765565b111561082f565b611672565b610b26565b610c45915060203d8111610c4b575b610c3d81836107bb565b8101906107ef565b38610ade565b503d610c33565b610c6a915060203d8111610c4b57610c3d81836107bb565b38610a43565b610c88915060203d8111610c4b57610c3d81836107bb565b386109b8565b60405162461bcd60e51b815260206004820152600c60248201526b416374696f6e2064656c617960a01b6044820152606490fd5b610cca61145d565b610cd7610b7760006108b3565b602063a9059cbb91610ce960066108b3565b90610ba360008695610cfd610b9660405190565b03925af18015610beb57610d42575b5080610d3c7f357d905f1831209797df4d55d79c5c5bf1d9f7311c976afd05e13d881eab9bc89161029c60405190565b0390a190565b610d599060203d8111610be457610bd881836107bb565b610d0c565b6101fe61145d565b15610d6d57565b60405162461bcd60e51b815260206004820152600a60248201526937b7363c9030b236b4b760b11b6044820152606490fd5b15610da657565b60405162461bcd60e51b815260206004820152600d60248201526c30b1ba34bb329030b1ba34b7b760991b6044820152606490fd5b6101fe6203f480610765565b90600019905b9181191691161790565b90610e076101fe610e0e92610765565b8254610de7565b9055565b906001600160a01b0390610ded565b90610e316101fe610e0e926102c6565b8254610e12565b610e5f33610e59610e4c6101f260046108b3565b916001600160a01b031690565b14610d66565b610e7f610e6c600961075b565b610e7961088a6000610765565b14610d9f565b610e95610e8e4261091c610ddb565b6009610df7565b610ea0816007610e21565b610ece7ff918f289f5185efe74d8bdf25364dbbc9c83a2bc438ede64b939cf6751ccf27c9161024060405190565b0390a1565b610ee733610e59610e4c6101f260046108b3565b610efb610ef46000610765565b6008610df7565b610f08610e8e6000610765565b610f1260046108b3565b610f407fc0a6e80c08b9d10c650a9f3e8ff16d7ee0f62bbd5c8ac3b5eba62dae04ec995a9161024060405190565b0390a1610f4d60066108b3565b610ece7fd9338c71e91ed720d2bd77976c87a0cd6f01ee443a6410481ffdebb9f442db679161024060405190565b15610f8257565b60405162461bcd60e51b815260206004820152600e60248201526d62616420706172742076616c756560901b6044820152606490fd5b610fcc33610e59610e4c6101f260046108b3565b610fe581610fde61088a6101fe61089e565b1115610f7b565b610ff0816003610df7565b610ece7f43abfd568a12e5f6ea230e56ba11b83e29e9921019211df9cc2e216ba9f225dc9161029c60405190565b1561102557565b60405162461bcd60e51b815260206004820152600e60248201526d37b7363c903732bb9030b236b4b760911b6044820152606490fd5b1561106257565b60405162461bcd60e51b8152602060048201526011602482015270696e73756666696369656e742074696d6560781b6044820152606490fd5b156110a257565b60405162461bcd60e51b815260206004820152601060248201526f37379030b1ba34bb329030b1ba34b7b760811b6044820152606490fd5b6110e460056108b3565b611100336110fa6001600160a01b038416610e4c565b1461101e565b61111b4261111461088a6101fe600861075b565b101561105b565b61113c611128600861075b565b61113561088a6000610765565b141561109b565b611147816004610e21565b611154610ef46000610765565b610ece7fc0a6e80c08b9d10c650a9f3e8ff16d7ee0f62bbd5c8ac3b5eba62dae04ec995a9161024060405190565b6111964261111461088a6101fe600961075b565b6111a3611128600961075b565b6111ad60076108b3565b6111b8816006610e21565b610f4d610e8e6000610765565b6111d2610914600161075b565b42106113d95761120660206109567f00000000000000000000000000000000000000000000000000000000000000006102c6565b03915afa908115610beb576000916113bb575b5061124860206109e77f00000000000000000000000000000000000000000000000000000000000000006102c6565b03915afa8015610beb5761128591600091610c5257507f00000000000000000000000000000000000000000000000000000000000000009061081c565b61128d61145d565b916112d460206112bc7f00000000000000000000000000000000000000000000000000000000000000006102c6565b63a035b1fe906112cb60405190565b93849260e01b90565b825260049082905afa908115610beb5760009161139d575b506112f76000610765565b50818311156113635761131461088a670de0b6b3a7640000610765565b1061135657610b11611329916113319361080f565b6001906118d8565b905b80821061134a57610b38610b48916101fe9361080f565b50506101fe6000610765565b5050506101fe6000610765565b91909161137a61088a670de0b6b3a7640000610765565b1161135657610b1161138f916113979361080f565b6000906118d8565b90611333565b6113b5915060203d8111610c4b57610c3d81836107bb565b386112ec565b6113d3915060203d8111610c4b57610c3d81836107bb565b38611219565b6101fe6000610765565b6113f733610e59610e4c6101f260046108b3565b611404610e6c600861075b565b611413610ef44261091c610ddb565b61141e816005610e21565b610ece7f0305c49816a5a9a099d81e90d76421c9a4a529e0640cd15297b6fc8f1c9ac6ff9161024060405190565b6101fe670de0b6b3a7640000610765565b611498602061146f610b7760006108b3565b6370a0823190611481610a23306102c6565b83526001600160a01b031660048301526024820190565b03915afa908115610beb57600091611566575b506114e960206114da7f00000000000000000000000000000000000000000000000000000000000000006102c6565b63bb7b8b80906112cb60405190565b825260049082905afa908115610beb5761152c9161152491600091611548575b5061151f611517600261075b565b610b4261144c565b610884565b61091c61144c565b80821161153f5750506101fe6000610765565b6101fe9161080f565b611560915060203d8111610c4b57610c3d81836107bb565b38611509565b61157e915060203d8111610c4b57610c3d81836107bb565b386114ab565b9061020561159160405190565b92836107bb565b67ffffffffffffffff81116107dd5760200290565b6115b96101fe91611598565b611584565b369037565b906102056115d0836115ad565b926115db8491611598565b906115be565b6101fe60026115c3565b634e487b7160e01b600052603260045260246000fd5b906002811015611612576020020190565b6115eb565b61162361088a60029390565b6000915b8383106116345750505050565b61164e6116476001928451815260200190565b9260200190565b92019190611627565b91604061020592949361090360608201966000830190611617565b8061168061088a6000610765565b146117945761168d6115e1565b906116bf816116bc7f000000000000000000000000000000000000000000000000000000000000000085611601565b52565b6116ca426001610df7565b6116e26116db82610a1e600261075b565b6002610df7565b6117107f5b6b431d4476a211bb7d41c20d1aab9ae2321deee0d20be3d9fc9b1093fa6e3d9161029c60405190565b0390a161173c7f00000000000000000000000000000000000000000000000000000000000000006102c6565b6000199163e310327391803b156101ed576117606000809461176b610b9660405190565b845260048401611657565b03925af18015610beb5761177c5750565b61020590600061178c81836107bb565b8101906101e2565b50565b61020190610765565b9160406102059294936117bb60608201966000830190611617565b0190611797565b806117d061088a6000610765565b14611794576117dd6115e1565b9061180c816116bc7f000000000000000000000000000000000000000000000000000000000000000085611601565b611817426001610df7565b61182d6116db82611828600261075b565b610793565b61185b7f8d685bd3f45d861c759ed7a46ea3d30eb5cc6ce9fe06c526931f94c963bca7d29161029c60405190565b0390a16118877f00000000000000000000000000000000000000000000000000000000000000006102c6565b600091630b4c7e4d91803b156101ed576118aa6000809461176b610b9660405190565b8452600484016117a0565b9160406102059294936118d060608201966000830190611617565b019015159052565b906118eb602061146f610b7760006108b3565b03915afa908115610beb57600091611aa7575b50611909600261075b565b838315611a93575b5061191a6115e1565b92611949856116bc7f000000000000000000000000000000000000000000000000000000000000000087611601565b60206119747f00000000000000000000000000000000000000000000000000000000000000006102c6565b63ed8e84f3959061199984976119a461198c60405190565b998a958694859460e01b90565b8452600484016118b5565b03915afa8015610beb57611a1094600091611a75575b509015611a5b576119d6926119cf9190610793565b9390610793565b6020611a017f00000000000000000000000000000000000000000000000000000000000000006102c6565b63bb7b8b8090610ab160405190565b825260049082905afa908115610beb5761151f6115249261152c94600091611a3d575b5091610b4261144c565b611a55915060203d8111610c4b57610c3d81836107bb565b38611a33565b611a7092611a69919061080f565b939061080f565b6119d6565b611a8d915060203d8111610c4b57610c3d81836107bb565b386119ba565b611aa09194508490611ac5565b9238611911565b611abf915060203d8111610c4b57610c3d81836107bb565b386118fe565b9080821015611ad2575090565b90509056fea164736f6c6343000818000a",
    "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 167,
                "contract": "contracts/stabilizer/PegKeeperV1.sol:PegKeeperV1",
                "label": "LP",
                "offset": 0,
                "slot": "0",
                "type": "t_contract(IStableSwapLP)75"
            },
            {
                "astId": 172,
                "contract": "contracts/stabilizer/PegKeeperV1.sol:PegKeeperV1",
                "label": "last_change",
                "offset": 0,
                "slot": "1",
                "type": "t_uint256"
            },
            {
                "astId": 174,
                "contract": "contracts/stabilizer/PegKeeperV1.sol:PegKeeperV1",
                "label": "debt",
                "offset": 0,
                "slot": "2",
                "type": "t_uint256"
            },
            {
                "astId": 176,
                "contract": "contracts/stabilizer/PegKeeperV1.sol:PegKeeperV1",
                "label": "caller_share",
                "offset": 0,
                "slot": "3",
                "type": "t_uint256"
            },
            {
                "astId": 178,
                "contract": "contracts/stabilizer/PegKeeperV1.sol:PegKeeperV1",
                "label": "admin",
                "offset": 0,
                "slot": "4",
                "type": "t_address"
            },
            {
                "astId": 180,
                "contract": "contracts/stabilizer/PegKeeperV1.sol:PegKeeperV1",
                "label": "future_admin",
                "offset": 0,
                "slot": "5",
                "type": "t_address"
            },
            {
                "astId": 182,
                "contract": "contracts/stabilizer/PegKeeperV1.sol:PegKeeperV1",
                "label": "receiver",
                "offset": 0,
                "slot": "6",
                "type": "t_address"
            },
            {
                "astId": 184,
                "contract": "contracts/stabilizer/PegKeeperV1.sol:PegKeeperV1",
                "label": "future_receiver",
                "offset": 0,
                "slot": "7",
                "type": "t_address"
            },
            {
                "astId": 186,
                "contract": "contracts/stabilizer/PegKeeperV1.sol:PegKeeperV1",
                "label": "new_admin_deadline",
                "offset": 0,
                "slot": "8",
                "type": "t_uint256"
            },
            {
                "astId": 188,
                "contract": "contracts/stabilizer/PegKeeperV1.sol:PegKeeperV1",
                "label": "new_receiver_deadline",
                "offset": 0,
                "slot": "9",
                "type": "t_uint256"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_contract(IStableSwapLP)75": {
                "encoding": "inplace",
                "label": "contract IStableSwapLP",
                "numberOfBytes": "20"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            }
        }
    }
}
